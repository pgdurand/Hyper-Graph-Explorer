/*@bgen(jjtree) Generated By:JJTree: Do not edit this line. hge_parser.jj */
/*@egen*/
options {
   STATIC=false;
              
                
                     
                                         
}

PARSER_BEGIN(HGEParser)
package com.plealog.hge.parser;

import java.util.ArrayList;
import java.util.HashSet;
import java.util.Set;
import java.util.Collection;
import com.plealog.hge.dataholder.*;

public class HGEParser/*@bgen(jjtree)*/implements HGEParserTreeConstants/*@egen*/ {/*@bgen(jjtree)*/
  protected JJTHGEParserState jjtree = new JJTHGEParserState();

/*@egen*/
    private static String removeQuotes(Token t){
        return (t.image.substring(1, t.image.length()-1));
    }
    
}

PARSER_END(HGEParser)

SKIP : /* WHITE SPACE */
{
  " "
| "\t"
| "\n"
| "\r"
| "\f"
}

TOKEN: 
{
    < PLUS          : "+" >
  | < MINUS         : "-" >
  | < MULT          : "*" >
  | < DIV           : "/" >
  | < MOD           : "%" >
  | < LT            : "<" >
  | < LTE           : "<=" >
  | < GT            : ">" >
  | < GTE           : ">=" >
  | < EQ            : "==" >
  | < NEQ           : "!=" >
  | < MAT           : "::" >
  | < NMAT          : "!:" >
  | < AND           : "and" >
  | < NOT           : "not" >
  | < OR            : "or" >
  | < OPENPAR       : "(" >
  | < CLOSEPAR      : ")" >
  | < SEMICOLON     : ";" >
  | < DOT           : "." >
  | < COLON         : ":" >
  | < COMMA         : "," >
  | < FROM          : "from" >
  | < WHERE         : "where" >
  | < RETURN        : "return" >
  | < PATH          : "path" >
  | < NEXT          : "next" >
  | < CONNECT       : "connect" >
  | < UNTIL         : "until" >
  | < IN            : "in" >
  | < TRUE          : "true" >
  | < FALSE         : "false" >
  | < DISTINCT      : "distinct" >
  | < AS            : "as" >
  | < AMP           : "&" >
}

TOKEN:  /* Literals : integer, real, string and char*/
{
    < INTEGER_LITERAL: (["0"-"9"])+ >
  | < FLOATING_POINT_LITERAL:
          (["0"-"9"])+ "." (["0"-"9"])+ (<EXPONENT>)?
        | "." (["0"-"9"])+ (<EXPONENT>)?
        | (["0"-"9"])+ <EXPONENT>
        | (["0"-"9"])+ (<EXPONENT>)?
    >
  | < #EXPONENT: ["e","E"] (["+","-"])? (["0"-"9"])+ >
  | < CHARACTER_LITERAL:
      "'"
      (   (~["'","\\","\n","\r"])
        | ("\\"
            ( ["n","t","b","r","f","\\","'","\""]
            | ["0"-"7"] ( ["0"-"7"] )?
            | ["0"-"3"] ["0"-"7"] ["0"-"7"]
            )
          )
      )
      "'"
    >
  | < STRING_LITERAL:
      "\""
      (   (~["\"","\n","\r"])
        | ("\\"
            ( ["n","t","b","r","f","\\","'","\""]
            | ["0"-"7"] ( ["0"-"7"] )?
            | ["0"-"3"] ["0"-"7"] ["0"-"7"]
            )
          )
      )*
      "\""
    >
}

TOKEN:  /* Identifiers */
{
    < IDENTIFIER: ( <LETTER> | "_" )+ ( "_" | <DIGIT> | <LETTER> )* >
  | < #LETTER: ["A"-"Z", "a"-"z"] >
  | < #DIGIT: ["0"-"9"] >
}

/*
 * Start - Process a QueryClause
 */
    HGEQuery Query() :
    {/*@bgen(jjtree) Query */
  HGEQuery jjtn000 = new HGEQuery(JJTQUERY);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
    {/*@bgen(jjtree) Query */
        try {
/*@egen*/
        ( <FROM> SimpleQuery()
          <RETURN> QueryReturnClause()
          <SEMICOLON>
        )/*@bgen(jjtree)*/
        {
          jjtree.closeNodeScope(jjtn000, true);
          jjtc000 = false;
        }
/*@egen*/
        { return jjtn000; }/*@bgen(jjtree)*/
        } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            throw (RuntimeException)jjte000;
          }
          if (jjte000 instanceof ParseException) {
            throw (ParseException)jjte000;
          }
          throw (Error)jjte000;
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
        }
/*@egen*/
    }
    
    HGESimpleQuery SimpleQuery() :
    {/*@bgen(jjtree) SimpleQuery */
  HGESimpleQuery jjtn000 = new HGESimpleQuery(JJTSIMPLEQUERY);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
    {/*@bgen(jjtree) SimpleQuery */
        try {
/*@egen*/
        ( SimpleQueryDeclaration()
          (<AMP> SimpleQueryDeclaration())*
          [<WHERE> QueryWhereClause()]
        )/*@bgen(jjtree)*/
        {
          jjtree.closeNodeScope(jjtn000, true);
          jjtc000 = false;
        }
/*@egen*/
        { return jjtn000; }/*@bgen(jjtree)*/
        } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            throw (RuntimeException)jjte000;
          }
          if (jjte000 instanceof ParseException) {
            throw (ParseException)jjte000;
          }
          throw (Error)jjte000;
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
        }
/*@egen*/
    }
    
    HGESimpleQueryDeclaration SimpleQueryDeclaration() :
    {/*@bgen(jjtree) SimpleQueryDeclaration */
  HGESimpleQueryDeclaration jjtn000 = new HGESimpleQueryDeclaration(JJTSIMPLEQUERYDECLARATION);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
    {/*@bgen(jjtree) SimpleQueryDeclaration */
        try {
/*@egen*/
        ( 
          VariableName() <AS> QueryClause()
        )/*@bgen(jjtree)*/
        {
          jjtree.closeNodeScope(jjtn000, true);
          jjtc000 = false;
        }
/*@egen*/
        { return jjtn000; }/*@bgen(jjtree)*/
        } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            throw (RuntimeException)jjte000;
          }
          if (jjte000 instanceof ParseException) {
            throw (ParseException)jjte000;
          }
          throw (Error)jjte000;
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
        }
/*@egen*/
    }

/*    HGESimpleQuery SimpleQuery() :
    {}
    {
        ( QueryClause()
          [<WHERE> QueryWhereClause()]
        )
        { return jjtThis; }
    }
*/
    HGEQueryClause QueryClause() :
    {/*@bgen(jjtree) QueryClause */
  HGEQueryClause jjtn000 = new HGEQueryClause(JJTQUERYCLAUSE);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
    {/*@bgen(jjtree) QueryClause */
        try {
/*@egen*/
        ( QueryClauseDeclaration()
          (<COMMA> QueryClauseDeclaration())*
        )/*@bgen(jjtree)*/
        {
          jjtree.closeNodeScope(jjtn000, true);
          jjtc000 = false;
        }
/*@egen*/
        { return jjtn000; }/*@bgen(jjtree)*/
        } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            throw (RuntimeException)jjte000;
          }
          if (jjte000 instanceof ParseException) {
            throw (ParseException)jjte000;
          }
          throw (Error)jjte000;
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
        }
/*@egen*/
    }
    
    void QueryClauseDeclaration()       :
    {}
    {
        
        LOOKAHEAD(2) VarEdgeDeclaration() 
        | LOOKAHEAD(2) VarPathDeclaration() 
        | VarNodeDeclaration()
    }
/*
 * End - Process a QueryClause
 */

/*
 * Start - Process a VarNodeDeclaration
 */
    HGEVarNodeDeclaration VarNodeDeclaration() :
    {/*@bgen(jjtree) VarNodeDeclaration */
     HGEVarNodeDeclaration jjtn000 = new HGEVarNodeDeclaration(JJTVARNODEDECLARATION);
     boolean jjtc000 = true;
     jjtree.openNodeScope(jjtn000);
/*@egen*/Token t;}
    {/*@bgen(jjtree) VarNodeDeclaration */
        try {
/*@egen*/
        ( 
          VariableName()
          [ <IN> TypeExpression() ]
        )/*@bgen(jjtree)*/
        {
          jjtree.closeNodeScope(jjtn000, true);
          jjtc000 = false;
        }
/*@egen*/
        { return jjtn000; }/*@bgen(jjtree)*/
        } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            throw (RuntimeException)jjte000;
          }
          if (jjte000 instanceof ParseException) {
            throw (ParseException)jjte000;
          }
          throw (Error)jjte000;
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
        }
/*@egen*/
    }
/*
 * End - Process a VarNodeDeclaration
 */

/*
 * Start - Process an VarEdgeDeclaration
 */
    HGEVarEdgeDeclaration VarEdgeDeclaration() :
    {/*@bgen(jjtree) VarEdgeDeclaration */
     HGEVarEdgeDeclaration jjtn000 = new HGEVarEdgeDeclaration(JJTVAREDGEDECLARATION);
     boolean jjtc000 = true;
     jjtree.openNodeScope(jjtn000);
/*@egen*/Token t;}
    {/*@bgen(jjtree) VarEdgeDeclaration */
        try {
/*@egen*/
        ( 
          VariableName()
          <COLON>
          VariableName()
          (<MINUS>
          VariableName())+
          [ <IN> TypeExpression() ]
        )/*@bgen(jjtree)*/
        {
          jjtree.closeNodeScope(jjtn000, true);
          jjtc000 = false;
        }
/*@egen*/
        { return jjtn000; }/*@bgen(jjtree)*/
        } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            throw (RuntimeException)jjte000;
          }
          if (jjte000 instanceof ParseException) {
            throw (ParseException)jjte000;
          }
          throw (Error)jjte000;
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
        }
/*@egen*/
    }
/*
 * End - Process an VarEdgeDeclaration
 */

/*
 * Start - Process a VarPathDeclaration
 */
    HGEVarPathDeclaration VarPathDeclaration() :
    {/*@bgen(jjtree) VarPathDeclaration */
     HGEVarPathDeclaration jjtn000 = new HGEVarPathDeclaration(JJTVARPATHDECLARATION);
     boolean jjtc000 = true;
     jjtree.openNodeScope(jjtn000);
/*@egen*/Token t;}
    {/*@bgen(jjtree) VarPathDeclaration */
        try {
/*@egen*/
        ( 
          VariableName()
          <OPENPAR>
          VariableName()
          <COMMA>
          VariableName()
          <COMMA>
          PathOperator()
          [ <COMMA> PathLength() 
              [ <COMMA> PathLength() 
              ]
          ]
          <CLOSEPAR>
        )/*@bgen(jjtree)*/
        {
          jjtree.closeNodeScope(jjtn000, true);
          jjtc000 = false;
        }
/*@egen*/
        { return jjtn000; }/*@bgen(jjtree)*/
        } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            throw (RuntimeException)jjte000;
          }
          if (jjte000 instanceof ParseException) {
            throw (ParseException)jjte000;
          }
          throw (Error)jjte000;
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
        }
/*@egen*/
    }
    
    void PathOperator()               :
    {/*@bgen(jjtree) PathOperator */
     HGEPathOperator jjtn000 = new HGEPathOperator(JJTPATHOPERATOR);
     boolean jjtc000 = true;
     jjtree.openNodeScope(jjtn000);
/*@egen*/Token t;}
    {/*@bgen(jjtree) PathOperator */
        try {
/*@egen*/
        (t=<NEXT> | t=<CONNECT> | t=<UNTIL>)/*@bgen(jjtree)*/
        {
          jjtree.closeNodeScope(jjtn000, true);
          jjtc000 = false;
        }
/*@egen*/
        {jjtn000.setValue(new HGEString(t.image));}/*@bgen(jjtree)*/
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
        }
/*@egen*/ 
    }
    
    void PathLength()             :
    {/*@bgen(jjtree) PathLength */
     HGEPathLength jjtn000 = new HGEPathLength(JJTPATHLENGTH);
     boolean jjtc000 = true;
     jjtree.openNodeScope(jjtn000);
/*@egen*/Token t;}
    {/*@bgen(jjtree) PathLength */
        try {
/*@egen*/
        (t=<INTEGER_LITERAL>)/*@bgen(jjtree)*/
        {
          jjtree.closeNodeScope(jjtn000, true);
          jjtc000 = false;
        }
/*@egen*/
        {jjtn000.setValue(new HGELong(t.image));}/*@bgen(jjtree)*/
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
        }
/*@egen*/ 
    }
/*
 * End - Process a VarPathDeclaration
 */

/*
 * Start - used within a Node/Edge/Path Declaration
 */
    void VariableName()               :
    {/*@bgen(jjtree) VariableName */
     HGEVariableName jjtn000 = new HGEVariableName(JJTVARIABLENAME);
     boolean jjtc000 = true;
     jjtree.openNodeScope(jjtn000);
/*@egen*/Token t;}
    {/*@bgen(jjtree) VariableName */
        try {
/*@egen*/
        (t=<IDENTIFIER>)/*@bgen(jjtree)*/
        {
          jjtree.closeNodeScope(jjtn000, true);
          jjtc000 = false;
        }
/*@egen*/
        {jjtn000.setValue(new HGEIdentifier(t.image));}/*@bgen(jjtree)*/
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
        }
/*@egen*/ 
    }
/*
 * End - used within a Node/Edge/Path Declaration
 */

/*
 * Start - Process a TypeExpression (declaration of Node/Edge data type expression)
 */
    HGETypeExpression TypeExpression() :
    {/*@bgen(jjtree) TypeExpression */
  HGETypeExpression jjtn000 = new HGETypeExpression(JJTTYPEEXPRESSION);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
    {/*@bgen(jjtree) TypeExpression */
        try {
/*@egen*/
        OrTypeExpression()/*@bgen(jjtree)*/
        {
          jjtree.closeNodeScope(jjtn000, true);
          jjtc000 = false;
        }
/*@egen*/
        { return jjtn000; }/*@bgen(jjtree)*/
        } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            throw (RuntimeException)jjte000;
          }
          if (jjte000 instanceof ParseException) {
            throw (ParseException)jjte000;
          }
          throw (Error)jjte000;
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
        }
/*@egen*/
    }
    
    void OrTypeExpression()       :
    {}
    {
        ( AndTypeExpression()
            ( <OR>/*@bgen(jjtree) #OrTypeExpression( 2) */
                   {
                     HGEOrTypeExpression jjtn001 = new HGEOrTypeExpression(JJTORTYPEEXPRESSION);
                     boolean jjtc001 = true;
                     jjtree.openNodeScope(jjtn001);
                   }
                   try {
/*@egen*/ AndTypeExpression()/*@bgen(jjtree)*/
                   } catch (Throwable jjte001) {
                     if (jjtc001) {
                       jjtree.clearNodeScope(jjtn001);
                       jjtc001 = false;
                     } else {
                       jjtree.popNode();
                     }
                     if (jjte001 instanceof RuntimeException) {
                       throw (RuntimeException)jjte001;
                     }
                     if (jjte001 instanceof ParseException) {
                       throw (ParseException)jjte001;
                     }
                     throw (Error)jjte001;
                   } finally {
                     if (jjtc001) {
                       jjtree.closeNodeScope(jjtn001,  2);
                     }
                   }
/*@egen*/                      )*
        )
    }
    
    void AndTypeExpression()       :
    {}
    {
        UnaryTypeExpression()
        ( <AND>/*@bgen(jjtree) #AndTypeExpression( 2) */
                {
                  HGEAndTypeExpression jjtn001 = new HGEAndTypeExpression(JJTANDTYPEEXPRESSION);
                  boolean jjtc001 = true;
                  jjtree.openNodeScope(jjtn001);
                }
                try {
/*@egen*/ UnaryTypeExpression()/*@bgen(jjtree)*/
                } catch (Throwable jjte001) {
                  if (jjtc001) {
                    jjtree.clearNodeScope(jjtn001);
                    jjtc001 = false;
                  } else {
                    jjtree.popNode();
                  }
                  if (jjte001 instanceof RuntimeException) {
                    throw (RuntimeException)jjte001;
                  }
                  if (jjte001 instanceof ParseException) {
                    throw (ParseException)jjte001;
                  }
                  throw (Error)jjte001;
                } finally {
                  if (jjtc001) {
                    jjtree.closeNodeScope(jjtn001,  2);
                  }
                }
/*@egen*/                       )*
    }
    
    void UnaryTypeExpression()       :
    {}
    {
        <NOT>/*@bgen(jjtree) #NotTypeExpression( 1) */
              {
                HGENotTypeExpression jjtn001 = new HGENotTypeExpression(JJTNOTTYPEEXPRESSION);
                boolean jjtc001 = true;
                jjtree.openNodeScope(jjtn001);
              }
              try {
/*@egen*/ UnaryTypeExpression()/*@bgen(jjtree)*/
              } catch (Throwable jjte001) {
                if (jjtc001) {
                  jjtree.clearNodeScope(jjtn001);
                  jjtc001 = false;
                } else {
                  jjtree.popNode();
                }
                if (jjte001 instanceof RuntimeException) {
                  throw (RuntimeException)jjte001;
                }
                if (jjte001 instanceof ParseException) {
                  throw (ParseException)jjte001;
                }
                throw (Error)jjte001;
              } finally {
                if (jjtc001) {
                  jjtree.closeNodeScope(jjtn001,  1);
                }
              }
/*@egen*/                      
        |
        PrimaryTypeExpression()
    }
    
    void PrimaryTypeExpression()       :
    {
        Token t;
    }
    {
        DataType()
        |
        ( <OPENPAR> TypeExpression() <CLOSEPAR> )
    }
    
    void DataType()           :
    {/*@bgen(jjtree) DataType */
     HGEDataType jjtn000 = new HGEDataType(JJTDATATYPE);
     boolean jjtc000 = true;
     jjtree.openNodeScope(jjtn000);
/*@egen*/Token t;}
    {/*@bgen(jjtree) DataType */
        try {
/*@egen*/
        (t=<STRING_LITERAL>)/*@bgen(jjtree)*/
        {
          jjtree.closeNodeScope(jjtn000, true);
          jjtc000 = false;
        }
/*@egen*/
        {jjtn000.setValue(new HGEString(removeQuotes(t)));}/*@bgen(jjtree)*/
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
        }
/*@egen*/ 
    }
/*
 * End - Process a TypeExpression (declaration of Node/Edge data type expression)
 */

/*
 * Start - process a QueryWhereClause
 */
    HGEQueryWhereClause QueryWhereClause() :
    {/*@bgen(jjtree) QueryWhereClause */
  HGEQueryWhereClause jjtn000 = new HGEQueryWhereClause(JJTQUERYWHERECLAUSE);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
    {/*@bgen(jjtree) QueryWhereClause */
        try {
/*@egen*/
        QueryWhereExpression() (<COMMA> QueryWhereExpression())*/*@bgen(jjtree)*/
        {
          jjtree.closeNodeScope(jjtn000, true);
          jjtc000 = false;
        }
/*@egen*/
        { return jjtn000; }/*@bgen(jjtree)*/
        } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            throw (RuntimeException)jjte000;
          }
          if (jjte000 instanceof ParseException) {
            throw (ParseException)jjte000;
          }
          throw (Error)jjte000;
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
        }
/*@egen*/
    }

    void QueryWhereExpression()                      :
    {/*@bgen(jjtree) QueryWhereExpression */
  HGEQueryWhereExpression jjtn000 = new HGEQueryWhereExpression(JJTQUERYWHEREEXPRESSION);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
    {/*@bgen(jjtree) QueryWhereExpression */
      try {
/*@egen*/
      ConditionalOrExpression()/*@bgen(jjtree)*/
      } catch (Throwable jjte000) {
        if (jjtc000) {
          jjtree.clearNodeScope(jjtn000);
          jjtc000 = false;
        } else {
          jjtree.popNode();
        }
        if (jjte000 instanceof RuntimeException) {
          throw (RuntimeException)jjte000;
        }
        if (jjte000 instanceof ParseException) {
          throw (ParseException)jjte000;
        }
        throw (Error)jjte000;
      } finally {
        if (jjtc000) {
          jjtree.closeNodeScope(jjtn000, true);
        }
      }
/*@egen*/
    }
    
    void ConditionalOrExpression()       :
    {}
    {
      ConditionalAndExpression()
      ( "or"/*@bgen(jjtree) #OrNode( 2) */
             {
               HGEOrNode jjtn001 = new HGEOrNode(JJTORNODE);
               boolean jjtc001 = true;
               jjtree.openNodeScope(jjtn001);
             }
             try {
/*@egen*/ ConditionalAndExpression()/*@bgen(jjtree)*/
             } catch (Throwable jjte001) {
               if (jjtc001) {
                 jjtree.clearNodeScope(jjtn001);
                 jjtc001 = false;
               } else {
                 jjtree.popNode();
               }
               if (jjte001 instanceof RuntimeException) {
                 throw (RuntimeException)jjte001;
               }
               if (jjte001 instanceof ParseException) {
                 throw (ParseException)jjte001;
               }
               throw (Error)jjte001;
             } finally {
               if (jjtc001) {
                 jjtree.closeNodeScope(jjtn001,  2);
               }
             }
/*@egen*/            )*
    }
    
    void ConditionalAndExpression()       :
    {}
    {
      EqualityExpression()
      ( "and"/*@bgen(jjtree) #AndNode( 2) */
              {
                HGEAndNode jjtn001 = new HGEAndNode(JJTANDNODE);
                boolean jjtc001 = true;
                jjtree.openNodeScope(jjtn001);
              }
              try {
/*@egen*/ EqualityExpression()/*@bgen(jjtree)*/
              } catch (Throwable jjte001) {
                if (jjtc001) {
                  jjtree.clearNodeScope(jjtn001);
                  jjtc001 = false;
                } else {
                  jjtree.popNode();
                }
                if (jjte001 instanceof RuntimeException) {
                  throw (RuntimeException)jjte001;
                }
                if (jjte001 instanceof ParseException) {
                  throw (ParseException)jjte001;
                }
                throw (Error)jjte001;
              } finally {
                if (jjtc001) {
                  jjtree.closeNodeScope(jjtn001,  2);
                }
              }
/*@egen*/             )*
    }
    
    void EqualityExpression()       :
    {}
    {
      RelationalExpression()
      (
         "=="/*@bgen(jjtree) #EQNode( 2) */
              {
                HGEEQNode jjtn001 = new HGEEQNode(JJTEQNODE);
                boolean jjtc001 = true;
                jjtree.openNodeScope(jjtn001);
              }
              try {
/*@egen*/ RelationalExpression()/*@bgen(jjtree)*/
              } catch (Throwable jjte001) {
                if (jjtc001) {
                  jjtree.clearNodeScope(jjtn001);
                  jjtc001 = false;
                } else {
                  jjtree.popNode();
                }
                if (jjte001 instanceof RuntimeException) {
                  throw (RuntimeException)jjte001;
                }
                if (jjte001 instanceof ParseException) {
                  throw (ParseException)jjte001;
                }
                throw (Error)jjte001;
              } finally {
                if (jjtc001) {
                  jjtree.closeNodeScope(jjtn001,  2);
                }
              }
/*@egen*/           
       |
         "!="/*@bgen(jjtree) #NENode( 2) */
              {
                HGENENode jjtn002 = new HGENENode(JJTNENODE);
                boolean jjtc002 = true;
                jjtree.openNodeScope(jjtn002);
              }
              try {
/*@egen*/ RelationalExpression()/*@bgen(jjtree)*/
              } catch (Throwable jjte002) {
                if (jjtc002) {
                  jjtree.clearNodeScope(jjtn002);
                  jjtc002 = false;
                } else {
                  jjtree.popNode();
                }
                if (jjte002 instanceof RuntimeException) {
                  throw (RuntimeException)jjte002;
                }
                if (jjte002 instanceof ParseException) {
                  throw (ParseException)jjte002;
                }
                throw (Error)jjte002;
              } finally {
                if (jjtc002) {
                  jjtree.closeNodeScope(jjtn002,  2);
                }
              }
/*@egen*/           
       |
         "::"/*@bgen(jjtree) #MatNode( 2) */
              {
                HGEMatNode jjtn003 = new HGEMatNode(JJTMATNODE);
                boolean jjtc003 = true;
                jjtree.openNodeScope(jjtn003);
              }
              try {
/*@egen*/ RelationalExpression()/*@bgen(jjtree)*/
              } catch (Throwable jjte003) {
                if (jjtc003) {
                  jjtree.clearNodeScope(jjtn003);
                  jjtc003 = false;
                } else {
                  jjtree.popNode();
                }
                if (jjte003 instanceof RuntimeException) {
                  throw (RuntimeException)jjte003;
                }
                if (jjte003 instanceof ParseException) {
                  throw (ParseException)jjte003;
                }
                throw (Error)jjte003;
              } finally {
                if (jjtc003) {
                  jjtree.closeNodeScope(jjtn003,  2);
                }
              }
/*@egen*/            
       |
         "!:"/*@bgen(jjtree) #NMatNode( 2) */
              {
                HGENMatNode jjtn004 = new HGENMatNode(JJTNMATNODE);
                boolean jjtc004 = true;
                jjtree.openNodeScope(jjtn004);
              }
              try {
/*@egen*/ RelationalExpression()/*@bgen(jjtree)*/
              } catch (Throwable jjte004) {
                if (jjtc004) {
                  jjtree.clearNodeScope(jjtn004);
                  jjtc004 = false;
                } else {
                  jjtree.popNode();
                }
                if (jjte004 instanceof RuntimeException) {
                  throw (RuntimeException)jjte004;
                }
                if (jjte004 instanceof ParseException) {
                  throw (ParseException)jjte004;
                }
                throw (Error)jjte004;
              } finally {
                if (jjtc004) {
                  jjtree.closeNodeScope(jjtn004,  2);
                }
              }
/*@egen*/             
      )*
    }
    
    void RelationalExpression()       :
    {}
    {
      AdditiveExpression()
      (
        "<"/*@bgen(jjtree) #LTNode( 2) */
            {
              HGELTNode jjtn001 = new HGELTNode(JJTLTNODE);
              boolean jjtc001 = true;
              jjtree.openNodeScope(jjtn001);
            }
            try {
/*@egen*/ AdditiveExpression()/*@bgen(jjtree)*/
            } catch (Throwable jjte001) {
              if (jjtc001) {
                jjtree.clearNodeScope(jjtn001);
                jjtc001 = false;
              } else {
                jjtree.popNode();
              }
              if (jjte001 instanceof RuntimeException) {
                throw (RuntimeException)jjte001;
              }
              if (jjte001 instanceof ParseException) {
                throw (ParseException)jjte001;
              }
              throw (Error)jjte001;
            } finally {
              if (jjtc001) {
                jjtree.closeNodeScope(jjtn001,  2);
              }
            }
/*@egen*/           
       |
        ">"/*@bgen(jjtree) #GTNode( 2) */
            {
              HGEGTNode jjtn002 = new HGEGTNode(JJTGTNODE);
              boolean jjtc002 = true;
              jjtree.openNodeScope(jjtn002);
            }
            try {
/*@egen*/ AdditiveExpression()/*@bgen(jjtree)*/
            } catch (Throwable jjte002) {
              if (jjtc002) {
                jjtree.clearNodeScope(jjtn002);
                jjtc002 = false;
              } else {
                jjtree.popNode();
              }
              if (jjte002 instanceof RuntimeException) {
                throw (RuntimeException)jjte002;
              }
              if (jjte002 instanceof ParseException) {
                throw (ParseException)jjte002;
              }
              throw (Error)jjte002;
            } finally {
              if (jjtc002) {
                jjtree.closeNodeScope(jjtn002,  2);
              }
            }
/*@egen*/           
       |
        "<="/*@bgen(jjtree) #LENode( 2) */
             {
               HGELENode jjtn003 = new HGELENode(JJTLENODE);
               boolean jjtc003 = true;
               jjtree.openNodeScope(jjtn003);
             }
             try {
/*@egen*/ AdditiveExpression()/*@bgen(jjtree)*/
             } catch (Throwable jjte003) {
               if (jjtc003) {
                 jjtree.clearNodeScope(jjtn003);
                 jjtc003 = false;
               } else {
                 jjtree.popNode();
               }
               if (jjte003 instanceof RuntimeException) {
                 throw (RuntimeException)jjte003;
               }
               if (jjte003 instanceof ParseException) {
                 throw (ParseException)jjte003;
               }
               throw (Error)jjte003;
             } finally {
               if (jjtc003) {
                 jjtree.closeNodeScope(jjtn003,  2);
               }
             }
/*@egen*/           
       |
        ">="/*@bgen(jjtree) #GENode( 2) */
             {
               HGEGENode jjtn004 = new HGEGENode(JJTGENODE);
               boolean jjtc004 = true;
               jjtree.openNodeScope(jjtn004);
             }
             try {
/*@egen*/ AdditiveExpression()/*@bgen(jjtree)*/
             } catch (Throwable jjte004) {
               if (jjtc004) {
                 jjtree.clearNodeScope(jjtn004);
                 jjtc004 = false;
               } else {
                 jjtree.popNode();
               }
               if (jjte004 instanceof RuntimeException) {
                 throw (RuntimeException)jjte004;
               }
               if (jjte004 instanceof ParseException) {
                 throw (ParseException)jjte004;
               }
               throw (Error)jjte004;
             } finally {
               if (jjtc004) {
                 jjtree.closeNodeScope(jjtn004,  2);
               }
             }
/*@egen*/           
      )*
    }
    
    void AdditiveExpression()       :
    {}
    {
      MultiplicativeExpression()
      (
        "+"/*@bgen(jjtree) #AddNode( 2) */
            {
              HGEAddNode jjtn001 = new HGEAddNode(JJTADDNODE);
              boolean jjtc001 = true;
              jjtree.openNodeScope(jjtn001);
            }
            try {
/*@egen*/ MultiplicativeExpression()/*@bgen(jjtree)*/
            } catch (Throwable jjte001) {
              if (jjtc001) {
                jjtree.clearNodeScope(jjtn001);
                jjtc001 = false;
              } else {
                jjtree.popNode();
              }
              if (jjte001 instanceof RuntimeException) {
                throw (RuntimeException)jjte001;
              }
              if (jjte001 instanceof ParseException) {
                throw (ParseException)jjte001;
              }
              throw (Error)jjte001;
            } finally {
              if (jjtc001) {
                jjtree.closeNodeScope(jjtn001,  2);
              }
            }
/*@egen*/            
       |
        "-"/*@bgen(jjtree) #SubtractNode( 2) */
            {
              HGESubtractNode jjtn002 = new HGESubtractNode(JJTSUBTRACTNODE);
              boolean jjtc002 = true;
              jjtree.openNodeScope(jjtn002);
            }
            try {
/*@egen*/ MultiplicativeExpression()/*@bgen(jjtree)*/
            } catch (Throwable jjte002) {
              if (jjtc002) {
                jjtree.clearNodeScope(jjtn002);
                jjtc002 = false;
              } else {
                jjtree.popNode();
              }
              if (jjte002 instanceof RuntimeException) {
                throw (RuntimeException)jjte002;
              }
              if (jjte002 instanceof ParseException) {
                throw (ParseException)jjte002;
              }
              throw (Error)jjte002;
            } finally {
              if (jjtc002) {
                jjtree.closeNodeScope(jjtn002,  2);
              }
            }
/*@egen*/                 
      )*
    }
    
    void MultiplicativeExpression()       :
    {}
    {
      UnaryExpression()
      (
        "*"/*@bgen(jjtree) #MulNode( 2) */
            {
              HGEMulNode jjtn001 = new HGEMulNode(JJTMULNODE);
              boolean jjtc001 = true;
              jjtree.openNodeScope(jjtn001);
            }
            try {
/*@egen*/ UnaryExpression()/*@bgen(jjtree)*/
            } catch (Throwable jjte001) {
              if (jjtc001) {
                jjtree.clearNodeScope(jjtn001);
                jjtc001 = false;
              } else {
                jjtree.popNode();
              }
              if (jjte001 instanceof RuntimeException) {
                throw (RuntimeException)jjte001;
              }
              if (jjte001 instanceof ParseException) {
                throw (ParseException)jjte001;
              }
              throw (Error)jjte001;
            } finally {
              if (jjtc001) {
                jjtree.closeNodeScope(jjtn001,  2);
              }
            }
/*@egen*/            
       |
        "/"/*@bgen(jjtree) #DivNode( 2) */
            {
              HGEDivNode jjtn002 = new HGEDivNode(JJTDIVNODE);
              boolean jjtc002 = true;
              jjtree.openNodeScope(jjtn002);
            }
            try {
/*@egen*/ UnaryExpression()/*@bgen(jjtree)*/
            } catch (Throwable jjte002) {
              if (jjtc002) {
                jjtree.clearNodeScope(jjtn002);
                jjtc002 = false;
              } else {
                jjtree.popNode();
              }
              if (jjte002 instanceof RuntimeException) {
                throw (RuntimeException)jjte002;
              }
              if (jjte002 instanceof ParseException) {
                throw (ParseException)jjte002;
              }
              throw (Error)jjte002;
            } finally {
              if (jjtc002) {
                jjtree.closeNodeScope(jjtn002,  2);
              }
            }
/*@egen*/            
       |
        "%"/*@bgen(jjtree) #ModNode( 2) */
            {
              HGEModNode jjtn003 = new HGEModNode(JJTMODNODE);
              boolean jjtc003 = true;
              jjtree.openNodeScope(jjtn003);
            }
            try {
/*@egen*/ UnaryExpression()/*@bgen(jjtree)*/
            } catch (Throwable jjte003) {
              if (jjtc003) {
                jjtree.clearNodeScope(jjtn003);
                jjtc003 = false;
              } else {
                jjtree.popNode();
              }
              if (jjte003 instanceof RuntimeException) {
                throw (RuntimeException)jjte003;
              }
              if (jjte003 instanceof ParseException) {
                throw (ParseException)jjte003;
              }
              throw (Error)jjte003;
            } finally {
              if (jjtc003) {
                jjtree.closeNodeScope(jjtn003,  2);
              }
            }
/*@egen*/            
      )*
    }
    
    void UnaryExpression()       :
    {}
    {
      "-"/*@bgen(jjtree) #UnaryMinusNode( 1) */
          {
            HGEUnaryMinusNode jjtn001 = new HGEUnaryMinusNode(JJTUNARYMINUSNODE);
            boolean jjtc001 = true;
            jjtree.openNodeScope(jjtn001);
          }
          try {
/*@egen*/ UnaryExpression()/*@bgen(jjtree)*/
          } catch (Throwable jjte001) {
            if (jjtc001) {
              jjtree.clearNodeScope(jjtn001);
              jjtc001 = false;
            } else {
              jjtree.popNode();
            }
            if (jjte001 instanceof RuntimeException) {
              throw (RuntimeException)jjte001;
            }
            if (jjte001 instanceof ParseException) {
              throw (ParseException)jjte001;
            }
            throw (Error)jjte001;
          } finally {
            if (jjtc001) {
              jjtree.closeNodeScope(jjtn001,  1);
            }
          }
/*@egen*/                   
    |
      "!"/*@bgen(jjtree) #NotNode( 1) */
          {
            HGENotNode jjtn002 = new HGENotNode(JJTNOTNODE);
            boolean jjtc002 = true;
            jjtree.openNodeScope(jjtn002);
          }
          try {
/*@egen*/ UnaryExpression()/*@bgen(jjtree)*/
          } catch (Throwable jjte002) {
            if (jjtc002) {
              jjtree.clearNodeScope(jjtn002);
              jjtc002 = false;
            } else {
              jjtree.popNode();
            }
            if (jjte002 instanceof RuntimeException) {
              throw (RuntimeException)jjte002;
            }
            if (jjte002 instanceof ParseException) {
              throw (ParseException)jjte002;
            }
            throw (Error)jjte002;
          } finally {
            if (jjtc002) {
              jjtree.closeNodeScope(jjtn002,  1);
            }
          }
/*@egen*/            
    |
      PrimaryExpression()
    }
    
    void PrimaryExpression()       :
    {}
    {
      ("[" ListLiteral() "]")
      |
      ("{" SetLiteral() "}")
      |
      LOOKAHEAD(2) FunctionCall()
      |
      LOOKAHEAD(2) VarAccessor()
      |
      IntegerLiteral()
      |
      FloatLiteral()
      |
      BooleanLiteral() 
      |
      StringLiteral() 
      |
      CharacterLiteral() 
      |
      ("(" QueryWhereExpression() ")")
    }
    
    void VarAccessor()              :
    {/*@bgen(jjtree) VarAccessor */
        HGEVarAccessor jjtn000 = new HGEVarAccessor(JJTVARACCESSOR);
        boolean jjtc000 = true;
        jjtree.openNodeScope(jjtn000);
/*@egen*/
        ArrayList al = new ArrayList();
        String    varID=null;
        Token     t;
    }
    {/*@bgen(jjtree) VarAccessor */
        try {
/*@egen*/
        ( (t = <IDENTIFIER>){varID=t.image;} 
          ( <DOT> 
            (t = <IDENTIFIER>){al.add(t.image);} )*
        )/*@bgen(jjtree)*/
        {
          jjtree.closeNodeScope(jjtn000, true);
          jjtc000 = false;
        }
/*@egen*/
        { 
            if (al.isEmpty())
                jjtn000.setValue(new HGEVarInstance(new HGEIdentifier(varID))); 
            else
                jjtn000.setValue(new HGEVarAccess(new HGEIdentifier(varID), al)); 
        }/*@bgen(jjtree)*/
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
        }
/*@egen*/
    }

    void ListLiteral()              :
    {/*@bgen(jjtree) ListLiteral */
        HGEListLiteral jjtn000 = new HGEListLiteral(JJTLISTLITERAL);
        boolean jjtc000 = true;
        jjtree.openNodeScope(jjtn000);
/*@egen*/
        ArrayList al = new ArrayList();
        HashSet control = new HashSet();
        Token     t;
    }
    {/*@bgen(jjtree) ListLiteral */
        try {
/*@egen*/
        ( BasicLiteral(al, control)
          ( <COMMA> BasicLiteral(al, control) )*
        )/*@bgen(jjtree)*/
        {
          jjtree.closeNodeScope(jjtn000, true);
          jjtc000 = false;
        }
/*@egen*/
        { jjtn000.setValue(new HGEList(al)); }/*@bgen(jjtree)*/
        } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            throw (RuntimeException)jjte000;
          }
          if (jjte000 instanceof ParseException) {
            throw (ParseException)jjte000;
          }
          throw (Error)jjte000;
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
        }
/*@egen*/
    }

    void SetLiteral()             :
    {/*@bgen(jjtree) SetLiteral */
        HGESetLiteral jjtn000 = new HGESetLiteral(JJTSETLITERAL);
        boolean jjtc000 = true;
        jjtree.openNodeScope(jjtn000);
/*@egen*/
        HashSet set = new HashSet();
        HashSet control = new HashSet();
        Token   t;
    }
    {/*@bgen(jjtree) SetLiteral */
        try {
/*@egen*/
        ( BasicLiteral(set, control)
          ( <COMMA> BasicLiteral(set, control) )*
        )/*@bgen(jjtree)*/
        {
          jjtree.closeNodeScope(jjtn000, true);
          jjtc000 = false;
        }
/*@egen*/
        { jjtn000.setValue(new HGESet(set)); }/*@bgen(jjtree)*/
        } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            throw (RuntimeException)jjte000;
          }
          if (jjte000 instanceof ParseException) {
            throw (ParseException)jjte000;
          }
          throw (Error)jjte000;
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
        }
/*@egen*/
    }

    void BasicLiteral(Collection list, Set control)       :
    {Token t; String str;}
    {
        ( t = <INTEGER_LITERAL>)
            { if (!control.contains(t.image)) {control.add(t.image); list.add(new HGELong(t.image)); } }
        |
        ( t = <FLOATING_POINT_LITERAL>)
            { if (!control.contains(t.image)) {control.add(t.image); list.add(new HGEDouble(t.image)); } }
        |
        ( t=<TRUE> | t=<FALSE>)
            { if (!control.contains(t.image)) {control.add(t.image); list.add(new HGEBoolean(t.image)); } }
        |
        ( t = <STRING_LITERAL>)
            {   str = t.image.substring(1,t.image.length()-1);
                if (!control.contains(str)) {control.add(str); list.add(new HGEString(str)); } }
        |
        ( t = <CHARACTER_LITERAL>)
            {   str = String.valueOf(t.image.charAt(1));
                if (!control.contains(str)) {control.add(str); list.add(new HGECharacter(str)); } }
    }

    void IntegerLiteral()                 :
    {/*@bgen(jjtree) IntegerLiteral */
     HGEIntegerLiteral jjtn000 = new HGEIntegerLiteral(JJTINTEGERLITERAL);
     boolean jjtc000 = true;
     jjtree.openNodeScope(jjtn000);
/*@egen*/Token t;}
    {/*@bgen(jjtree) IntegerLiteral */
        try {
/*@egen*/
        ( t = <INTEGER_LITERAL>)/*@bgen(jjtree)*/
        {
          jjtree.closeNodeScope(jjtn000, true);
          jjtc000 = false;
        }
/*@egen*/
        { jjtn000.setValue(new HGELong(t.image)); }/*@bgen(jjtree)*/
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
        }
/*@egen*/
    }

    void FloatLiteral()               :
    {/*@bgen(jjtree) FloatLiteral */
     HGEFloatLiteral jjtn000 = new HGEFloatLiteral(JJTFLOATLITERAL);
     boolean jjtc000 = true;
     jjtree.openNodeScope(jjtn000);
/*@egen*/Token t;}
    {/*@bgen(jjtree) FloatLiteral */
        try {
/*@egen*/
        ( t = <FLOATING_POINT_LITERAL> )/*@bgen(jjtree)*/
        {
          jjtree.closeNodeScope(jjtn000, true);
          jjtc000 = false;
        }
/*@egen*/
        { jjtn000.setValue(new HGEDouble(t.image)); }/*@bgen(jjtree)*/
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
        }
/*@egen*/
    }

    void CharacterLiteral()                   :
    {/*@bgen(jjtree) CharacterLiteral */
     HGECharacterLiteral jjtn000 = new HGECharacterLiteral(JJTCHARACTERLITERAL);
     boolean jjtc000 = true;
     jjtree.openNodeScope(jjtn000);
/*@egen*/Token t;}
    {/*@bgen(jjtree) CharacterLiteral */
        try {
/*@egen*/
        ( t = <CHARACTER_LITERAL> )/*@bgen(jjtree)*/
        {
          jjtree.closeNodeScope(jjtn000, true);
          jjtc000 = false;
        }
/*@egen*/
        { jjtn000.setValue(new HGECharacter(t.image.charAt(1))); }/*@bgen(jjtree)*/
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
        }
/*@egen*/
    }
    
    void StringLiteral()                :
    {/*@bgen(jjtree) StringLiteral */
     HGEStringLiteral jjtn000 = new HGEStringLiteral(JJTSTRINGLITERAL);
     boolean jjtc000 = true;
     jjtree.openNodeScope(jjtn000);
/*@egen*/Token t;}
    {/*@bgen(jjtree) StringLiteral */
        try {
/*@egen*/
        ( t = <STRING_LITERAL> )/*@bgen(jjtree)*/
        {
          jjtree.closeNodeScope(jjtn000, true);
          jjtc000 = false;
        }
/*@egen*/
        { jjtn000.setValue(new HGEString(t.image.substring(1,t.image.length()-1))); }/*@bgen(jjtree)*/
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
        }
/*@egen*/
    }
    
    void BooleanLiteral()                 :
    {/*@bgen(jjtree) BooleanLiteral */
     HGEBooleanLiteral jjtn000 = new HGEBooleanLiteral(JJTBOOLEANLITERAL);
     boolean jjtc000 = true;
     jjtree.openNodeScope(jjtn000);
/*@egen*/Token t;}
    {/*@bgen(jjtree) BooleanLiteral */
        try {
/*@egen*/
        (t=<TRUE> | t=<FALSE>)/*@bgen(jjtree)*/
        {
          jjtree.closeNodeScope(jjtn000, true);
          jjtc000 = false;
        }
/*@egen*/
        { jjtn000.setValue(new HGEBoolean(t.image)); }/*@bgen(jjtree)*/
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
        }
/*@egen*/
    }

    void FunctionCall()               :
    {/*@bgen(jjtree) FunctionCall */
        HGEFunctionCall jjtn000 = new HGEFunctionCall(JJTFUNCTIONCALL);
        boolean jjtc000 = true;
        jjtree.openNodeScope(jjtn000);
/*@egen*/
        Token        t;
        int          args=0;
        HGEFunction func;
    }
    {/*@bgen(jjtree) FunctionCall */
        try {
/*@egen*/
        ( (t = <IDENTIFIER>) <OPENPAR> [ args=FunctionArgs() ] <CLOSEPAR> )/*@bgen(jjtree)*/
        {
          jjtree.closeNodeScope(jjtn000, true);
          jjtc000 = false;
        }
/*@egen*/
        {
            func = new HGEFunction(t.image);
            func.setArgs(args);
            jjtn000.setValue(func);
        }/*@bgen(jjtree)*/
        } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            throw (RuntimeException)jjte000;
          }
          if (jjte000 instanceof ParseException) {
            throw (ParseException)jjte000;
          }
          throw (Error)jjte000;
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
        }
/*@egen*/
    }

    int FunctionArgs()       :
    {int args=0;}
    {
        (ArgAdditiveExpression(){args++;}
          (<COMMA> (ArgAdditiveExpression(){args++;}))*)
          {
            return(args);
          }
    }

    void ArgAdditiveExpression()       :
    {}
    {
      ArgMultiplicativeExpression()
      (
        "+"/*@bgen(jjtree) #AddNode( 2) */
            {
              HGEAddNode jjtn001 = new HGEAddNode(JJTADDNODE);
              boolean jjtc001 = true;
              jjtree.openNodeScope(jjtn001);
            }
            try {
/*@egen*/ ArgMultiplicativeExpression()/*@bgen(jjtree)*/
            } catch (Throwable jjte001) {
              if (jjtc001) {
                jjtree.clearNodeScope(jjtn001);
                jjtc001 = false;
              } else {
                jjtree.popNode();
              }
              if (jjte001 instanceof RuntimeException) {
                throw (RuntimeException)jjte001;
              }
              if (jjte001 instanceof ParseException) {
                throw (ParseException)jjte001;
              }
              throw (Error)jjte001;
            } finally {
              if (jjtc001) {
                jjtree.closeNodeScope(jjtn001,  2);
              }
            }
/*@egen*/            
       |
        "-"/*@bgen(jjtree) #SubtractNode( 2) */
            {
              HGESubtractNode jjtn002 = new HGESubtractNode(JJTSUBTRACTNODE);
              boolean jjtc002 = true;
              jjtree.openNodeScope(jjtn002);
            }
            try {
/*@egen*/ ArgMultiplicativeExpression()/*@bgen(jjtree)*/
            } catch (Throwable jjte002) {
              if (jjtc002) {
                jjtree.clearNodeScope(jjtn002);
                jjtc002 = false;
              } else {
                jjtree.popNode();
              }
              if (jjte002 instanceof RuntimeException) {
                throw (RuntimeException)jjte002;
              }
              if (jjte002 instanceof ParseException) {
                throw (ParseException)jjte002;
              }
              throw (Error)jjte002;
            } finally {
              if (jjtc002) {
                jjtree.closeNodeScope(jjtn002,  2);
              }
            }
/*@egen*/                 
      )*
    }
    
    void ArgMultiplicativeExpression()       :
    {}
    {
      ArgUnaryExpression()
      (
        "*"/*@bgen(jjtree) #MulNode( 2) */
            {
              HGEMulNode jjtn001 = new HGEMulNode(JJTMULNODE);
              boolean jjtc001 = true;
              jjtree.openNodeScope(jjtn001);
            }
            try {
/*@egen*/ ArgUnaryExpression()/*@bgen(jjtree)*/
            } catch (Throwable jjte001) {
              if (jjtc001) {
                jjtree.clearNodeScope(jjtn001);
                jjtc001 = false;
              } else {
                jjtree.popNode();
              }
              if (jjte001 instanceof RuntimeException) {
                throw (RuntimeException)jjte001;
              }
              if (jjte001 instanceof ParseException) {
                throw (ParseException)jjte001;
              }
              throw (Error)jjte001;
            } finally {
              if (jjtc001) {
                jjtree.closeNodeScope(jjtn001,  2);
              }
            }
/*@egen*/            
       |
        "/"/*@bgen(jjtree) #DivNode( 2) */
            {
              HGEDivNode jjtn002 = new HGEDivNode(JJTDIVNODE);
              boolean jjtc002 = true;
              jjtree.openNodeScope(jjtn002);
            }
            try {
/*@egen*/ ArgUnaryExpression()/*@bgen(jjtree)*/
            } catch (Throwable jjte002) {
              if (jjtc002) {
                jjtree.clearNodeScope(jjtn002);
                jjtc002 = false;
              } else {
                jjtree.popNode();
              }
              if (jjte002 instanceof RuntimeException) {
                throw (RuntimeException)jjte002;
              }
              if (jjte002 instanceof ParseException) {
                throw (ParseException)jjte002;
              }
              throw (Error)jjte002;
            } finally {
              if (jjtc002) {
                jjtree.closeNodeScope(jjtn002,  2);
              }
            }
/*@egen*/            
       |
        "%"/*@bgen(jjtree) #ModNode( 2) */
            {
              HGEModNode jjtn003 = new HGEModNode(JJTMODNODE);
              boolean jjtc003 = true;
              jjtree.openNodeScope(jjtn003);
            }
            try {
/*@egen*/ ArgUnaryExpression()/*@bgen(jjtree)*/
            } catch (Throwable jjte003) {
              if (jjtc003) {
                jjtree.clearNodeScope(jjtn003);
                jjtc003 = false;
              } else {
                jjtree.popNode();
              }
              if (jjte003 instanceof RuntimeException) {
                throw (RuntimeException)jjte003;
              }
              if (jjte003 instanceof ParseException) {
                throw (ParseException)jjte003;
              }
              throw (Error)jjte003;
            } finally {
              if (jjtc003) {
                jjtree.closeNodeScope(jjtn003,  2);
              }
            }
/*@egen*/            
      )*
    }
    
    void ArgUnaryExpression()       :
    {}
    {
      "-"/*@bgen(jjtree) #UnaryMinusNode( 1) */
          {
            HGEUnaryMinusNode jjtn001 = new HGEUnaryMinusNode(JJTUNARYMINUSNODE);
            boolean jjtc001 = true;
            jjtree.openNodeScope(jjtn001);
          }
          try {
/*@egen*/ ArgUnaryExpression()/*@bgen(jjtree)*/
          } catch (Throwable jjte001) {
            if (jjtc001) {
              jjtree.clearNodeScope(jjtn001);
              jjtc001 = false;
            } else {
              jjtree.popNode();
            }
            if (jjte001 instanceof RuntimeException) {
              throw (RuntimeException)jjte001;
            }
            if (jjte001 instanceof ParseException) {
              throw (ParseException)jjte001;
            }
            throw (Error)jjte001;
          } finally {
            if (jjtc001) {
              jjtree.closeNodeScope(jjtn001,  1);
            }
          }
/*@egen*/                   
    |
      "!"/*@bgen(jjtree) #NotNode( 1) */
          {
            HGENotNode jjtn002 = new HGENotNode(JJTNOTNODE);
            boolean jjtc002 = true;
            jjtree.openNodeScope(jjtn002);
          }
          try {
/*@egen*/ ArgUnaryExpression()/*@bgen(jjtree)*/
          } catch (Throwable jjte002) {
            if (jjtc002) {
              jjtree.clearNodeScope(jjtn002);
              jjtc002 = false;
            } else {
              jjtree.popNode();
            }
            if (jjte002 instanceof RuntimeException) {
              throw (RuntimeException)jjte002;
            }
            if (jjte002 instanceof ParseException) {
              throw (ParseException)jjte002;
            }
            throw (Error)jjte002;
          } finally {
            if (jjtc002) {
              jjtree.closeNodeScope(jjtn002,  1);
            }
          }
/*@egen*/            
    |
      ArgPrimaryExpression()
    }
    
    void ArgPrimaryExpression()       :
    {}
    {
      ("[" ListLiteral() "]")
      |
      ("{" SetLiteral() "}")
      |
      LOOKAHEAD(2) FunctionCall()
      |
      LOOKAHEAD(2) VarAccessor()
      |
      IntegerLiteral()
      |
      FloatLiteral()
      |
      BooleanLiteral() 
      |
      StringLiteral() 
      |
      CharacterLiteral() 
      |
      ("(" ArgAdditiveExpression() ")")
    }
    
/**/
/*
 * End - process a QueryWhereClause
 */

/*
 * Start - process a ReturnClause
 */
    HGEQueryReturnClause QueryReturnClause() :
    {/*@bgen(jjtree) QueryReturnClause */
    HGEQueryReturnClause jjtn000 = new HGEQueryReturnClause(JJTQUERYRETURNCLAUSE);
    boolean jjtc000 = true;
    jjtree.openNodeScope(jjtn000);
/*@egen*/
    boolean bDistinct=false;
    }
    {/*@bgen(jjtree) QueryReturnClause */
        try {
/*@egen*/
        [<DISTINCT>{bDistinct=true;}] 
        ((<MULT>)
         |
         ( VariableName() (<COMMA> VariableName())*)
        )/*@bgen(jjtree)*/
        {
          jjtree.closeNodeScope(jjtn000, true);
          jjtc000 = false;
        }
/*@egen*/
        { 
        	jjtn000.setValue((bDistinct ? HGEBoolean.TRUE : HGEBoolean.FALSE));
        	return jjtn000; 
        }/*@bgen(jjtree)*/
        } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            throw (RuntimeException)jjte000;
          }
          if (jjte000 instanceof ParseException) {
            throw (ParseException)jjte000;
          }
          throw (Error)jjte000;
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
        }
/*@egen*/
    }